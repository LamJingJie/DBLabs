package simpledb.execution;

import simpledb.transaction.TransactionAbortedException;
import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    JoinPredicate p;
    OpIterator child1;
    OpIterator child2;
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        int f1Index = p.getField1();
        return this.child1.getTupleDesc().getFieldName(f1Index);
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        int f2Index = p.getField2();
        return this.child2.getTupleDesc().getFieldName(f2Index);
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        TupleDesc td1 = child1.getTupleDesc();
        TupleDesc td2 = child2.getTupleDesc();
        return TupleDesc.merge(td1, td2);
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();
        child1.open();
        child2.open();
    }

    public void close() {
        // some code goes here
        super.close();
        child1.close();
        child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException, IllegalStateException {
        // some code goes here
        child1.rewind();
        currentT1Tuple = null; // Reset current tuple for child1
        child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */

    // Reason of having this variable:
    // We need to keep track of the current tuple from child1 that we are processing.
    // After we find a match and return a tuple, the next fetchNext call should continue
    // from where it left off in child1. Meaning that if we found a match for A-1, then the 
    // next call to fetchNext should continue with A-2, and not B-1.
    Tuple currentT1Tuple = null;
    protected Tuple fetchNext() throws TransactionAbortedException, DbException, IllegalStateException {
        // some code goes here

        if(currentT1Tuple == null) {
            if(child1.hasNext()){
                currentT1Tuple = child1.next();
            }else{
                return null; // since outer-join is not implemented, if child1 has no next, return null
            }
        }
        
        // Continue where we left of in child1
        while(currentT1Tuple != null){
            while (child2.hasNext()) {
                Tuple t2 = child2.next();
                if (p.filter(currentT1Tuple, t2)) {
                    // Match found, create a new tuple with the combined fields
                    Tuple res = new Tuple(getTupleDesc());

                    // copy over fields from both tuples
                    for (int i = 0; i < currentT1Tuple.getTupleDesc().numFields(); i++) {
                        res.setField(i, currentT1Tuple.getField(i));
                    }
                    for (int i = 0; i < t2.getTupleDesc().numFields(); i++) {
                        res.setField(currentT1Tuple.getTupleDesc().numFields() + i, t2.getField(i));
                    }
                    return res;
                }
            }
            // If we reach here, it means we exhausted child2 for the current child1 tuple
            // Reset child2 for the next iteration
            child2.rewind();
            if (child1.hasNext()) {
                currentT1Tuple = child1.next();
            } else {
                // No more tuples in child1, reset currentT1Tuple to null
                currentT1Tuple = null;
                break; // Exit the loop since we have no more tuples to process
            }
        }

        // No more matches
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        OpIterator[] children = new OpIterator[2];
        children[0] = child1;
        children[1] = child2;
        return children;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        if (children != null && children.length > 0){
            this.child1 = children[0];
            this.child2 = children[1];
        }
    }

}
